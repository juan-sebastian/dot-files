if [[ -z "$BREW_PREFIX" ]]; then
    if [[ -x /opt/homebrew/bin/brew ]]; then
        export BREW_PREFIX="/opt/homebrew"
    elif [[ -x /usr/local/bin/brew ]]; then
        export BREW_PREFIX="/usr/local"
    else
        export BREW_PREFIX=$(brew --prefix 2>/dev/null)
    fi
fi

if [[ -f "${BREW_PREFIX}/bin/brew" ]]; then
    eval "$("${BREW_PREFIX}/bin/brew" shellenv)"
fi

typeset -U path_components  # -U évite les doublons automatiquement
path_components=(
    # Homebrew bins
    "${BREW_PREFIX}/bin"
    "${BREW_PREFIX}/sbin"

    # GNU tools (si installés)
    "${BREW_PREFIX}/opt/coreutils/libexec/gnubin"
    "${BREW_PREFIX}/opt/findutils/libexec/gnubin"
    "${BREW_PREFIX}/opt/gnu-tar/libexec/gnubin"
    "${BREW_PREFIX}/opt/gnu-sed/libexec/gnubin"

    # Ruby (version dynamique cachée)
    "${BREW_PREFIX}/opt/ruby/bin"

    # GPG
    "/usr/local/MacGPG2/bin"

    # Go
    "/usr/local/Go/bin"

    # Local bins
    "${HOME}/.local/bin"

    # HammerSpoon
    "/Applications/Hammerspoon.app/Contents/Frameworks/hs"

    # Système
    "/usr/bin"
    "/bin"
    "/usr/sbin"
    "/sbin"
)

filtered_path=""
for dir in "${path_components[@]}"; do
    if [[ -d "$dir" ]]; then
        if [[ -z "$filtered_path" ]]; then
            filtered_path="$dir"
        else
            filtered_path="${filtered_path}:${dir}"
        fi
    fi
done
export PATH="$filtered_path"

if [[ -d "${BREW_PREFIX}/lib/ruby/gems" ]]; then
    # Cache la version Ruby pour éviter ls à chaque fois
    RUBY_CACHE_FILE="${HOME}/.cache/ruby_version"
    if [[ ! -f "$RUBY_CACHE_FILE" ]] || [[ ! -s "$RUBY_CACHE_FILE" ]] ||
       [[ "$RUBY_CACHE_FILE" -ot "${BREW_PREFIX}/lib/ruby/gems" ]]; then
        mkdir -p "${HOME}/.cache"
        RUBY_VERSION=$(ls -t "${BREW_PREFIX}/lib/ruby/gems/" 2>/dev/null | head -1)
        echo "$RUBY_VERSION" > "$RUBY_CACHE_FILE"
    else
        RUBY_VERSION=$(cat "$RUBY_CACHE_FILE")
    fi

    if [[ -n "$RUBY_VERSION" && -d "${BREW_PREFIX}/lib/ruby/gems/${RUBY_VERSION}/bin" ]]; then
        export PATH="${BREW_PREFIX}/lib/ruby/gems/${RUBY_VERSION}/bin:${PATH}"
    fi
fi

export NVM_DIR="$HOME/.nvm"
lazy_load_nvm() {
    unset -f nvm node npm npx
    if [[ -s "$NVM_DIR/nvm.sh" ]]; then
        source "$NVM_DIR/nvm.sh"
        [[ -s "$NVM_DIR/bash_completion" ]] && source "$NVM_DIR/bash_completion"
    elif [[ -s "${BREW_PREFIX}/opt/nvm/nvm.sh" ]]; then
        source "${BREW_PREFIX}/opt/nvm/nvm.sh"
        [[ -s "${BREW_PREFIX}/opt/nvm/etc/bash_completion.d/nvm" ]] && \
            source "${BREW_PREFIX}/opt/nvm/etc/bash_completion.d/nvm"
    fi
}

nvm() { lazy_load_nvm; nvm "$@"; }
node() { lazy_load_nvm; node "$@"; }
npm() { lazy_load_nvm; npm "$@"; }
npx() { lazy_load_nvm; npx "$@"; }

export PYENV_ROOT="${HOME}/.pyenv"
if [[ -d "${PYENV_ROOT}" ]]; then
    export PATH="${PYENV_ROOT}/bin:$PATH"
    lazy_load_pyenv() {
	unset -f pyenv python pip
	eval "$(pyenv init -)"

	if [[ -f "${ZSH}/plugins/pyenv/pyenv.plugin.zsh" ]]; then
	    source "${ZSH}/plugins/pyenv/pyenv.plugin.zsh"
	fi
    }
    pyenv() { lazy_load_pyenv; pyenv "$@"; }
    python() { lazy_load_pyenv; python "$@"; }
    pip() { lazy_load_pyenv; pip "$@"; }

    alias python3='python'
    alias pip3='pip'
fi

lazy_load_asdf() {
    unset -f asdf
    source "$(brew --prefix asdf)/asdf.sh"
    source "$(brew --prefix asdf)/etc/bash_completion.d/asdf.bash"
}
asdf() { lazy_load_asdf; asdf "$@"; }

export GOPATH="/usr/local/Go"
export TERM="screen-256color"
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

if [[ -z "$EDITOR" ]]; then
    if command -v nvim >/dev/null 2>&1; then
        export EDITOR="nvim"
    elif command -v vim >/dev/null 2>&1; then
        export EDITOR="vim"
    fi
fi

export GPG_TTY=$(tty)
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)

export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;38;5;74m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[38;5;016m\E[48;5;220m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[04;38;5;146m'

export CDK_DEFAULT_REGION=eu-central-1
export STAGE=dev

export NNN_TMPFILE="${HOME}/.config/nnn/.lastd"

if [[ -z "$TMUX" ]] || [[ "$LOAD_FULL_CONFIG" == "1" ]]; then

    [[ -f "${HOME}/.functions.bash" ]] && source "${HOME}/.functions.bash"

    [[ -f "${HOME}/.alias.bash" ]] && source "${HOME}/.alias.bash"

    [[ -f "${HOME}/.exports.bash" ]] && source "${HOME}/.exports.bash"
fi

n() {
    [[ "${NNNLVL:-0}" -eq 0 ]] || {
        echo "nnn is already running"
        return
    }

    command nnn "$@"

    [[ ! -f "$NNN_TMPFILE" ]] || {
        source "$NNN_TMPFILE"
        rm -f "$NNN_TMPFILE" >/dev/null 2>&1
    }
}
