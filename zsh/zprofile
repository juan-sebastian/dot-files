eval "$(/opt/homebrew/bin/brew shellenv)"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# Brew prefix
BREW_PREFIX=$(PATH=/opt/homebrew/bin:/usr/local/bin:${PATH} brew --prefix)

# Brew bin
PATH="${BREW_PREFIX}/bin:${BREW_PREFIX}/bin:${PATH}"

# Set PATH for gnu tools
PATH="${BREW_PREFIX}/opt/coreutils/libexec/gnubin:${PATH}"
PATH="${BREW_PREFIX}/opt/findutils/libexec/gnubin:${PATH}"
PATH="${BREW_PREFIX}/opt/gnu-tar/libexec/gnubin:${PATH}"
PATH="${BREW_PREFIX}/opt/gnu-sed/libexec/gnubin:${PATH}"

# Ruby
RUBY_VERSION=$(cd ${BREW_PREFIX}/lib/ruby/gems/ && ls --time=creation -t | head -1)
PATH="${BREW_PREFIX}/lib/ruby/gems/${RUBY_VERSION}/bin:${BREW_PREFIX}/opt/ruby/bin:${PATH}"

# Set PATH for gpg2
PATH="/usr/local/MacGPG2/bin:${PATH}"

# Golang
export GOPATH="/usr/local/Go"
PATH="/usr/local/Go/bin:${PATH}"

# my bin path
PATH="${HOME}/.local/bin:${PATH}"

export TERM="screen-256color"

# Set PATH for HammerSpoon CLI
export PATH="/Applications/Hammerspoon.app/Contents/Frameworks/hs:${PATH}"

# Clean PATH
export PATH=$(bb -e '(println (clojure.string/join ":" (distinct (clojure.string/split (System/getenv "PATH") #":"))))')

# UTF-8 lang
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# Less hightlight search
export LESS_TERMCAP_mb=$'\E[01;31m'       # begin blinking
export LESS_TERMCAP_md=$'\E[01;38;5;74m'  # begin bold
export LESS_TERMCAP_me=$'\E[0m'           # end mode
export LESS_TERMCAP_se=$'\E[0m'           # end standout-mode
export LESS_TERMCAP_so=$'\E[38;5;016m\E[48;5;220m'    # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m'           # end underline
export LESS_TERMCAP_us=$'\E[04;38;5;146m' # begin underline

# Source functions file
# source $HOME/.functions.bash

export EDITOR=$(which nvim)

# GPG config
export GPG_TTY=$(tty)
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)

# ASDF config
if [[ ! -z ${ENABLED_ASDF} ]]; then
	. $(brew --prefix asdf)/asdf.sh
	. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash
	PROMPT=$(echo ${PROMPT} | sed -e 's/\[%\*\]/\0 (ASDF)/g')
fi

n ()
{
    # Block nesting of nnn in subshells
    [ "${NNNLVL:-0}" -eq 0 ] || {
        echo "nnn is already running"
        return
    }

    # The behaviour is set to cd on quit (nnn checks if NNN_TMPFILE is set)
    # If NNN_TMPFILE is set to a custom path, it must be exported for nnn to
    # see. To cd on quit only on ^G, remove the "export" and make sure not to
    # use a custom path, i.e. set NNN_TMPFILE *exactly* as follows:
    #      NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    export NNN_TMPFILE="${HOME}/.config/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    # The command builtin allows one to alias nnn to n, if desired, without
    # making an infinitely recursive alias
    command nnn "$@"

    [ ! -f "$NNN_TMPFILE" ] || {
        . "$NNN_TMPFILE"
        rm -f "$NNN_TMPFILE" > /dev/null
    }
}

# NVM config
export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# AWS Useful
export AWS_PROFILE=ewego-stage
export CDK_DEFAULT_ACCOUNT=ewego-stage
export CDK_DEFAULT_REGION=eu-central-1
export STAGE=dev
PROMPT=$(echo ${PROMPT} | sed -e 's/\[%\*\]/(${AWS_PROFILE}\/${STAGE}) \0/g')

# Useful functions
if [[ -f ${HOME}/.functions.bash ]]; then
	. ${HOME}/.functions.bash
fi

# Useful alias
if [[ -f ${HOME}/.alias.bash ]]; then
	. ${HOME}/.alias.bash
fi

# Useful exports
if [[ -f ${HOME}/.exports.bash ]]; then
	. ${HOME}/.exports.bash
fi
